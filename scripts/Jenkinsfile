import hudson.triggers.TimerTrigger.TimerTriggerCause

properties([
    parameters([
        string(name: "ARTIFACTS_BUCKET", defaultValue: "safe-jenkins-build-artifacts"),
        string(name: "CACHE_BRANCH", defaultValue: "master"),
        string(name: "DEPLOY_BRANCH", defaultValue: "master"),
        string(name: "PUBLISH_BRANCH", defaultValue: "master"),
        string(name: "DEPLOY_BUCKET", defaultValue: "safe-client-libs"),
        string(name: "DEPLOY_NIGHTLY", defaultValue: "false")
    ]),
    pipelineTriggers([cron(env.BRANCH_NAME == "master" ? "0 2 * * *" : "")])
])

stage("build & test") {
    parallel dev_osx: {
        node("osx") {
            checkout(scm)
            runTests("dev")
            stripBuildArtifacts()
            packageBuildArtifacts("dev", "x86_64-apple-darwin")
            uploadBuildArtifacts()
        }
    },
    prod_macos: {
        node("osx") {
            checkout(scm)
            sh("make build")
            stripBuildArtifacts()
            packageBuildArtifacts("prod", "x86_64-apple-darwin")
            uploadBuildArtifacts()
        }
    },
    dev_ios_aarch64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-mock-aarch64")
            packageBuildArtifacts("dev", "aarch64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    prod_ios_aarch64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-aarch64")
            packageBuildArtifacts("prod", "aarch64-apple-ios")
            uploadBuildArtifacts()
        }
    },
    dev_ios_x86_64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-mock-x86_64")
            packageBuildArtifacts("dev", "x86_64-apple-ios")
            uploadBuildArtifacts()
        }
    }
    prod_ios_x86_64: {
        node("osx") {
            checkout(scm)
            sh("make build-ios-x86_64")
            packageBuildArtifacts("prod", "x86_64-apple-ios")
            uploadBuildArtifacts()
        }
    }
}

stage("build universal iOS lib") {
    node("osx") {
        checkout(scm)
        def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
        withEnv(["SCL_BUILD_BRANCH=${branch}",
                 "SCL_BUILD_NUMBER=${env.BUILD_NUMBER}"]) {
            sh("make universal-ios-lib")
            sh("make package-universal-ios-lib")
            uploadBuildArtifacts()
        }
    }
}

stage("deployment") {
    node("safe_client_libs") {
        if (env.BRANCH_NAME == "${params.DEPLOY_BRANCH}") {
            checkout(scm)
            sh("git fetch --tags --force")
            retrieveBuildArtifacts()
            packageDeployArtifacts("commit_hash")
            uploadDeployArtifacts("dev")
            uploadDeployArtifacts("prod")
        } else {
            echo("${env.BRANCH_NAME} does not match the deployment branch. Nothing to do.")
        }
    }
}

def getLatestCommitMessage() {
    def shortCommitHash = sh(
        returnStdout: true,
        script: "git log -n 1 --no-merges --pretty=format:'%h'").trim()
    def message = sh(
        returnStdout: true,
        script: "git log --format=%B -n 1 ${shortCommitHash}").trim()
    return message
}

def packageBuildArtifacts(mode, target) {
    def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
    withEnv(["SCL_BUILD_NUMBER=${env.BUILD_NUMBER}",
             "SCL_BUILD_BRANCH=${branch}",
             "SCL_BUILD_TARGET=${target}",
             "SCL_BUILD_TYPE=${mode}"]) {
        sh("make package-build-artifacts")
    }
}

def retrieveBuildArtifacts() {
    def branch = env.CHANGE_ID?.trim() ?: env.BRANCH_NAME
    withEnv(["SCL_BUILD_BRANCH=${branch}",
             "SCL_BUILD_NUMBER=${env.BUILD_NUMBER}"]) {
        sh("make retrieve-all-build-artifacts")
    }
}

def packageDeployArtifacts(type) {
    switch (type) {
        case "versioned":
            sh("make package-versioned-deploy-artifacts")
            break
        case "commit_hash":
            sh("make package-commit_hash-deploy-artifacts")
            break
        case "nightly":
            sh("make package-nightly-deploy-artifacts")
            break
        default:
            error("The deployment type ${type} is not supported. Please extend for support.")
    }
}

def stripBuildArtifacts() {
    sh("make strip-artifacts")
}

def uploadBuildArtifacts() {
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        def artifacts = sh(returnStdout: true, script: "ls -1 artifacts").trim().split("\\r?\\n")
        for (artifact in artifacts) {
            s3Upload(
                bucket: "${params.ARTIFACTS_BUCKET}",
                file: artifact,
                workingDir: "${env.WORKSPACE}/artifacts",
                acl: "PublicRead")
        }
    }
}

def getVersion(crate) {
    return sh(
        returnStdout: true,
        script: "grep '^version' < ${crate}/Cargo.toml | head -n 1 | awk '{ print \$3 }' | sed 's/\"//g'").trim()
}

def deletePreviousNightly() {
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        ["x86_64-unknown-linux-gnu", "x86_64-pc-windows-gnu", "x86_64-apple-darwin",
         "armv7-linux-androideabi", "x86_64-linux-android", "x86_64-apple-ios",
         "aarch64-apple-ios", "apple-ios"].each({
            s3Delete(
                bucket: "${params.DEPLOY_BUCKET}",
                path: "safe_app-nightly-${it}.tar.gz")
            s3Delete(
                bucket: "${params.DEPLOY_BUCKET}",
                path: "safe_authenticator-nightly-${it}.tar.gz")
        })
    }
}

def uploadDeployArtifacts(type) {
    withAWS(credentials: "aws_jenkins_user_credentials", region: "eu-west-2") {
        def artifacts = sh(
            returnStdout: true, script: "ls -1 deploy/${type}").trim().split("\\r?\\n")
        for (artifact in artifacts) {
            s3Upload(
                bucket: "${params.DEPLOY_BUCKET}",
                file: artifact,
                workingDir: "${env.WORKSPACE}/deploy/${type}",
                acl: "PublicRead")
        }
    }
}

def runTests(mode, bctTestPath="") {
    if (mode == "dev") {
        sh("make tests")
    } else if (mode == "mock-file") {
        sh("make test-with-mock-vault-file")
    } else if (mode == "binary") {
        withEnv(["SCL_BCT_PATH=${bctTestPath}"]) {
            sh("make test-artifacts-binary")
        }
    } else {
        sh("make tests-integration")
    }
}
